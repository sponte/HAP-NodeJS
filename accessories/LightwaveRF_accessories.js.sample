// HomeKit types required
var types = require("./types.js")
var lightwaverf = require('lightwaverf-node');

var callback;
module.exports = function(callback) {
  return init(callback);
}

var lightwaveRFController_Factor = new require("./../LightwaveRFController.js")
var lightwaveRFController = new lightwaveRFController_Factor.LRFController(900);

// Store the brightness to use instead of 'on' in order to prevent going into blinking mode

var executePower = function(room, accessory, value) {
    var cmd = "lightwaverf \'" + room + "\' \'" + accessory + "\' ";
    if(value == true) cmd += "on"; //getBrightness(room + accessory);
    else cmd += "off";
    console.log("executePower: " + cmd);

    lightwaveRFController.exec(cmd);
}

var executeBrightness = function(room, accessory, value){
    var cmd = "lightwaverf \'" + room + "\' \'" + accessory + "\' ";
    cmd += value;
    console.log("executeBrigtness: " + cmd);

    lightwaveRFController.exec(cmd);
}

console.log("Checking lightwaveRF configuration");

function init(callback) {
  // Get the lightwaverf login details
  // Note: The file lightwaverflogin.txt should be located in the directory above Core.js and contain two lines
  //       The first line should be the loginname (=email)
  //       The second should be the lightwaverf pin

  fs = require('fs');
  var data = fs.readFileSync('./lightwaverflogin.txt', 'utf8')

  if (data.err) {
      return console.log(data.err);
  }
  var lrfLoginPass = data.split("\n");

  //if(!lrfLoginPass.isArray()) return;
  if(!Array.isArray(lrfLoginPass) || lrfLoginPass.size<2) return console.log("lightwaverflogin.txt should contain two lines");

  accessories = [];

  lightwaverf.getRooms(lrfLoginPass[0], lrfLoginPass[1], function(rooms) {
    LRFCallback(rooms, accessories);
    callback(accessories);
  })
}

// stdout should contain the configuration
function LRFCallback(rooms, accessories) {
    if(rooms) {
        for(var i=0; i<rooms.length;i++) {
            var room = rooms[i];
            if(!room.active) continue;
            //console.log(room+"\n");

            for(var j=0; j<room.devices.length;j++) {
                var device = room.devices[j];
                if(!device.active) continue;

                // Only supporting switches and dimmers for now
                if(!device.switch && !device.dimmer)
                    continue;

                // Finally... add the devices to homekit
                accessories.push(createAccessory(room, device));
            }
        }
    }
}

function createAccessory(room, device) {
    var accessory = {
      displayName: device.name,
      username: "1A:2B:3C:4D:5E:FF",
      pincode: "031-45-154",
      services: [{
        sType: types.ACCESSORY_INFORMATION_STYPE,
        characteristics: [{
            cType: types.NAME_CTYPE,
            onUpdate: null,
            perms: ["pr"],
            format: "string",
            initialValue: device.name,
            supportEvents: false,
            supportBonjour: false,
            manfDescription: "Bla",
            designedMaxLength: 255
        },{
            cType: types.MANUFACTURER_CTYPE,
            onUpdate: null,
            perms: ["pr"],
            format: "string",
            initialValue: "Oltica",
            supportEvents: false,
            supportBonjour: false,
            manfDescription: "Bla",
            designedMaxLength: 255
        },{
            cType: types.MODEL_CTYPE,
            onUpdate: null,
            perms: ["pr"],
            format: "string",
            initialValue: "Rev-1",
            supportEvents: false,
            supportBonjour: false,
            manfDescription: "Bla",
            designedMaxLength: 255
        },{
            cType: types.SERIAL_NUMBER_CTYPE,
            onUpdate: null,
            perms: ["pr"],
            format: "string",
            initialValue: "A1S2NASF88EW",
            supportEvents: false,
            supportBonjour: false,
            manfDescription: "Bla",
            designedMaxLength: 255
        },{
            cType: types.IDENTIFY_CTYPE,
            onUpdate: null,
            perms: ["pw"],
            format: "bool",
            initialValue: false,
            supportEvents: false,
            supportBonjour: false,
            manfDescription: "Identify Accessory",
            designedMaxLength: 1
        }]
      },{
        sType: types.LIGHTBULB_STYPE,
        characteristics: [{
            cType: types.NAME_CTYPE,
            onUpdate: null,
            perms: ["pr"],
            format: "string",
            initialValue: device.name,
            supportEvents: false,
            supportBonjour: false,
            manfDescription: "LightwaveRF",
            designedMaxLength: 255
        },{
            cType: types.POWER_STATE_CTYPE,
            onUpdate: function(value, callback) { console.log("Change:",value); device.controller.power(value, callback); },
            perms: ["pw","pr","ev"],
            format: "bool",
            initialValue: false,
            supportEvents: false,
            supportBonjour: false,
            manfDescription: "Turn On the Light",
            designedMaxLength: 1
        }]
      }]
    }

    var dimmerCharacteristic = {
        cType: types.BRIGHTNESS_CTYPE,
        onUpdate: function(value) { console.log("Change:",value); executeBrightness(room, device, value); },
        perms: ["pw","pr","ev"],
        format: "int",
        initialValue: 0,
        supportEvents: false,
        supportBonjour: false,
        manfDescription: "Adjust Brightness",
        designedMinValue: 0,
        designedMaxValue: 100,
        designedMinStep: 1,
        unit: "%"
      };

      // Only add dimming capability if we are a dimmer
      if(device.dimmer) {
        accessory.services[accessory.services.length - 1].characteristics.push(dimmerCharacteristic);
      }

    return accessory
}
